// Code generated by go-swagger; DO NOT EDIT.

package register

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "medicarePartD/gen/models"
)

// RegisterOKCode is the HTTP code returned for type RegisterOK
const RegisterOKCode int = 200

/*RegisterOK Succesful registration

swagger:response registerOK
*/
type RegisterOK struct {

	/*
	  In: Body
	*/
	Payload *models.ResponseCode `json:"body,omitempty"`
}

// NewRegisterOK creates RegisterOK with default headers values
func NewRegisterOK() *RegisterOK {

	return &RegisterOK{}
}

// WithPayload adds the payload to the register o k response
func (o *RegisterOK) WithPayload(payload *models.ResponseCode) *RegisterOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the register o k response
func (o *RegisterOK) SetPayload(payload *models.ResponseCode) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RegisterOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RegisterUnauthorizedCode is the HTTP code returned for type RegisterUnauthorized
const RegisterUnauthorizedCode int = 401

/*RegisterUnauthorized Unauthorized Error

swagger:response registerUnauthorized
*/
type RegisterUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ResponseCode `json:"body,omitempty"`
}

// NewRegisterUnauthorized creates RegisterUnauthorized with default headers values
func NewRegisterUnauthorized() *RegisterUnauthorized {

	return &RegisterUnauthorized{}
}

// WithPayload adds the payload to the register unauthorized response
func (o *RegisterUnauthorized) WithPayload(payload *models.ResponseCode) *RegisterUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the register unauthorized response
func (o *RegisterUnauthorized) SetPayload(payload *models.ResponseCode) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RegisterUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RegisterNotAcceptableCode is the HTTP code returned for type RegisterNotAcceptable
const RegisterNotAcceptableCode int = 406

/*RegisterNotAcceptable Not Acceptable Error

swagger:response registerNotAcceptable
*/
type RegisterNotAcceptable struct {

	/*
	  In: Body
	*/
	Payload *models.ResponseCode `json:"body,omitempty"`
}

// NewRegisterNotAcceptable creates RegisterNotAcceptable with default headers values
func NewRegisterNotAcceptable() *RegisterNotAcceptable {

	return &RegisterNotAcceptable{}
}

// WithPayload adds the payload to the register not acceptable response
func (o *RegisterNotAcceptable) WithPayload(payload *models.ResponseCode) *RegisterNotAcceptable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the register not acceptable response
func (o *RegisterNotAcceptable) SetPayload(payload *models.ResponseCode) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RegisterNotAcceptable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(406)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RegisterConflictCode is the HTTP code returned for type RegisterConflict
const RegisterConflictCode int = 409

/*RegisterConflict Conflict Error

swagger:response registerConflict
*/
type RegisterConflict struct {

	/*
	  In: Body
	*/
	Payload *models.ResponseCode `json:"body,omitempty"`
}

// NewRegisterConflict creates RegisterConflict with default headers values
func NewRegisterConflict() *RegisterConflict {

	return &RegisterConflict{}
}

// WithPayload adds the payload to the register conflict response
func (o *RegisterConflict) WithPayload(payload *models.ResponseCode) *RegisterConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the register conflict response
func (o *RegisterConflict) SetPayload(payload *models.ResponseCode) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RegisterConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RegisterInternalServerErrorCode is the HTTP code returned for type RegisterInternalServerError
const RegisterInternalServerErrorCode int = 500

/*RegisterInternalServerError Error when logging in

swagger:response registerInternalServerError
*/
type RegisterInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ResponseCode `json:"body,omitempty"`
}

// NewRegisterInternalServerError creates RegisterInternalServerError with default headers values
func NewRegisterInternalServerError() *RegisterInternalServerError {

	return &RegisterInternalServerError{}
}

// WithPayload adds the payload to the register internal server error response
func (o *RegisterInternalServerError) WithPayload(payload *models.ResponseCode) *RegisterInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the register internal server error response
func (o *RegisterInternalServerError) SetPayload(payload *models.ResponseCode) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RegisterInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
