// Code generated by go-swagger; DO NOT EDIT.

package records

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	strfmt "github.com/go-openapi/strfmt"

	models "medicarePartD/gen/models"
)

// NewGetRecordsListParams creates a new GetRecordsListParams object
// no default values defined in spec.
func NewGetRecordsListParams() GetRecordsListParams {

	return GetRecordsListParams{}
}

// GetRecordsListParams contains all the bound params for the get records list operation
// typically these are obtained from a http.Request
//
// swagger:parameters getRecordsList
type GetRecordsListParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  In: query
	*/
	City *string
	/*
	  In: query
	*/
	DrugName *string
	/*
	  In: body
	*/
	Records *models.Records
	/*
	  In: query
	*/
	Specialty *string
	/*
	  In: query
	*/
	State *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetRecordsListParams() beforehand.
func (o *GetRecordsListParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qCity, qhkCity, _ := qs.GetOK("city")
	if err := o.bindCity(qCity, qhkCity, route.Formats); err != nil {
		res = append(res, err)
	}

	qDrugName, qhkDrugName, _ := qs.GetOK("drugName")
	if err := o.bindDrugName(qDrugName, qhkDrugName, route.Formats); err != nil {
		res = append(res, err)
	}

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body models.Records
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			res = append(res, errors.NewParseError("records", "body", "", err))
		} else {
			// validate body object
			if err := body.Validate(route.Formats); err != nil {
				res = append(res, err)
			}

			if len(res) == 0 {
				o.Records = &body
			}
		}
	}
	qSpecialty, qhkSpecialty, _ := qs.GetOK("specialty")
	if err := o.bindSpecialty(qSpecialty, qhkSpecialty, route.Formats); err != nil {
		res = append(res, err)
	}

	qState, qhkState, _ := qs.GetOK("state")
	if err := o.bindState(qState, qhkState, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindCity binds and validates parameter City from query.
func (o *GetRecordsListParams) bindCity(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.City = &raw

	return nil
}

// bindDrugName binds and validates parameter DrugName from query.
func (o *GetRecordsListParams) bindDrugName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.DrugName = &raw

	return nil
}

// bindSpecialty binds and validates parameter Specialty from query.
func (o *GetRecordsListParams) bindSpecialty(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Specialty = &raw

	return nil
}

// bindState binds and validates parameter State from query.
func (o *GetRecordsListParams) bindState(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.State = &raw

	return nil
}
