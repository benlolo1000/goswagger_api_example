// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "swagger": "2.0",
  "info": {
    "title": "medicare records",
    "version": "1.0.0"
  },
  "paths": {
    "/login": {
      "post": {
        "tags": [
          "login"
        ],
        "summary": "allows new users to login",
        "operationId": "login",
        "parameters": [
          {
            "description": "the user to log in",
            "name": "login",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/login"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succesful login",
            "schema": {
              "$ref": "#/definitions/jwtCode"
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "schema": {
              "$ref": "#/definitions/responseCode"
            }
          },
          "403": {
            "description": "Forbidden Error",
            "schema": {
              "$ref": "#/definitions/responseCode"
            }
          },
          "406": {
            "description": "Not Acceptable Error",
            "schema": {
              "$ref": "#/definitions/responseCode"
            }
          },
          "500": {
            "description": "Error when logging in",
            "schema": {
              "$ref": "#/definitions/responseCode"
            }
          }
        }
      }
    },
    "/record": {
      "get": {
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "tags": [
          "record"
        ],
        "summary": "returns a record specified by ID.",
        "operationId": "getSingleRecord",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "query",
            "required": true
          },
          {
            "name": "record",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/record"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON object containing a record",
            "schema": {
              "$ref": "#/definitions/record"
            }
          },
          "403": {
            "description": "Forbidden Error",
            "schema": {
              "$ref": "#/definitions/responseCode"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/responseCode"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responseCode"
            }
          }
        }
      }
    },
    "/records": {
      "get": {
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "tags": [
          "records"
        ],
        "summary": "Returns a list of records.",
        "operationId": "getRecordsList",
        "parameters": [
          {
            "type": "string",
            "name": "city",
            "in": "query"
          },
          {
            "type": "string",
            "name": "state",
            "in": "query"
          },
          {
            "type": "string",
            "name": "drugName",
            "in": "query"
          },
          {
            "type": "string",
            "name": "specialty",
            "in": "query"
          },
          {
            "name": "records",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/records"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON object containing an array of records",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/records"
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "schema": {
              "$ref": "#/definitions/responseCode"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/responseCode"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responseCode"
            }
          }
        }
      }
    },
    "/register": {
      "post": {
        "tags": [
          "register"
        ],
        "summary": "allows new users to register",
        "operationId": "register",
        "parameters": [
          {
            "description": "the user to create",
            "name": "register",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/register"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succesful registration",
            "schema": {
              "$ref": "#/definitions/responseCode"
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "schema": {
              "$ref": "#/definitions/responseCode"
            }
          },
          "406": {
            "description": "Not Acceptable Error",
            "schema": {
              "$ref": "#/definitions/responseCode"
            }
          },
          "409": {
            "description": "Conflict Error",
            "schema": {
              "$ref": "#/definitions/responseCode"
            }
          },
          "500": {
            "description": "Error when logging in",
            "schema": {
              "$ref": "#/definitions/responseCode"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "jwtCode": {
      "properties": {
        "code": {
          "type": "string"
        },
        "jwt": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "login": {
      "required": [
        "email",
        "password"
      ],
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "record": {
      "properties": {
        "active": {
          "type": "string"
        },
        "beneCount": {
          "type": "string"
        },
        "beneCountGe65": {
          "type": "string"
        },
        "beneCountGe65Flag": {
          "type": "string"
        },
        "beneCountNum": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "drugName": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "ge65SuppressFlag": {
          "type": "string"
        },
        "genericName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "npi": {
          "type": "string"
        },
        "specialty": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "total30DayFillCount": {
          "type": "string"
        },
        "total30DayFillCountGe65": {
          "type": "string"
        },
        "totalClaimCount": {
          "type": "string"
        },
        "totalClaimCountGe65": {
          "type": "string"
        },
        "totalClaimCountNum": {
          "type": "string"
        },
        "totalDaySupply": {
          "type": "string"
        },
        "totalDaySupplyGe65": {
          "type": "string"
        },
        "totalDrugCost": {
          "type": "string"
        },
        "totalDrugCostNum": {
          "type": "string"
        },
        "totalDrugcostGe65": {
          "type": "string"
        }
      }
    },
    "records": {
      "properties": {
        "city": {
          "type": "string"
        },
        "drugName": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "genericName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "specialty": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "register": {
      "required": [
        "email",
        "password",
        "confirmPassword"
      ],
      "properties": {
        "confirmPassword": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "responseCode": {
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "APIKeyHeader": {
      "type": "apiKey",
      "name": "X-API-Key",
      "in": "header"
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "swagger": "2.0",
  "info": {
    "title": "medicare records",
    "version": "1.0.0"
  },
  "paths": {
    "/login": {
      "post": {
        "tags": [
          "login"
        ],
        "summary": "allows new users to login",
        "operationId": "login",
        "parameters": [
          {
            "description": "the user to log in",
            "name": "login",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/login"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succesful login",
            "schema": {
              "$ref": "#/definitions/jwtCode"
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "schema": {
              "$ref": "#/definitions/responseCode"
            }
          },
          "403": {
            "description": "Forbidden Error",
            "schema": {
              "$ref": "#/definitions/responseCode"
            }
          },
          "406": {
            "description": "Not Acceptable Error",
            "schema": {
              "$ref": "#/definitions/responseCode"
            }
          },
          "500": {
            "description": "Error when logging in",
            "schema": {
              "$ref": "#/definitions/responseCode"
            }
          }
        }
      }
    },
    "/record": {
      "get": {
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "tags": [
          "record"
        ],
        "summary": "returns a record specified by ID.",
        "operationId": "getSingleRecord",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "query",
            "required": true
          },
          {
            "name": "record",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/record"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON object containing a record",
            "schema": {
              "$ref": "#/definitions/record"
            }
          },
          "403": {
            "description": "Forbidden Error",
            "schema": {
              "$ref": "#/definitions/responseCode"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/responseCode"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responseCode"
            }
          }
        }
      }
    },
    "/records": {
      "get": {
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "tags": [
          "records"
        ],
        "summary": "Returns a list of records.",
        "operationId": "getRecordsList",
        "parameters": [
          {
            "type": "string",
            "name": "city",
            "in": "query"
          },
          {
            "type": "string",
            "name": "state",
            "in": "query"
          },
          {
            "type": "string",
            "name": "drugName",
            "in": "query"
          },
          {
            "type": "string",
            "name": "specialty",
            "in": "query"
          },
          {
            "name": "records",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/records"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON object containing an array of records",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/records"
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "schema": {
              "$ref": "#/definitions/responseCode"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/responseCode"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responseCode"
            }
          }
        }
      }
    },
    "/register": {
      "post": {
        "tags": [
          "register"
        ],
        "summary": "allows new users to register",
        "operationId": "register",
        "parameters": [
          {
            "description": "the user to create",
            "name": "register",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/register"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succesful registration",
            "schema": {
              "$ref": "#/definitions/responseCode"
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "schema": {
              "$ref": "#/definitions/responseCode"
            }
          },
          "406": {
            "description": "Not Acceptable Error",
            "schema": {
              "$ref": "#/definitions/responseCode"
            }
          },
          "409": {
            "description": "Conflict Error",
            "schema": {
              "$ref": "#/definitions/responseCode"
            }
          },
          "500": {
            "description": "Error when logging in",
            "schema": {
              "$ref": "#/definitions/responseCode"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "jwtCode": {
      "properties": {
        "code": {
          "type": "string"
        },
        "jwt": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "login": {
      "required": [
        "email",
        "password"
      ],
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "record": {
      "properties": {
        "active": {
          "type": "string"
        },
        "beneCount": {
          "type": "string"
        },
        "beneCountGe65": {
          "type": "string"
        },
        "beneCountGe65Flag": {
          "type": "string"
        },
        "beneCountNum": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "drugName": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "ge65SuppressFlag": {
          "type": "string"
        },
        "genericName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "npi": {
          "type": "string"
        },
        "specialty": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "total30DayFillCount": {
          "type": "string"
        },
        "total30DayFillCountGe65": {
          "type": "string"
        },
        "totalClaimCount": {
          "type": "string"
        },
        "totalClaimCountGe65": {
          "type": "string"
        },
        "totalClaimCountNum": {
          "type": "string"
        },
        "totalDaySupply": {
          "type": "string"
        },
        "totalDaySupplyGe65": {
          "type": "string"
        },
        "totalDrugCost": {
          "type": "string"
        },
        "totalDrugCostNum": {
          "type": "string"
        },
        "totalDrugcostGe65": {
          "type": "string"
        }
      }
    },
    "records": {
      "properties": {
        "city": {
          "type": "string"
        },
        "drugName": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "genericName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "specialty": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "register": {
      "required": [
        "email",
        "password",
        "confirmPassword"
      ],
      "properties": {
        "confirmPassword": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "responseCode": {
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "APIKeyHeader": {
      "type": "apiKey",
      "name": "X-API-Key",
      "in": "header"
    }
  }
}`))
}
